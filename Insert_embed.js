const { Client } = require('@elastic/elasticsearch');
const axios = require('axios');

// Elasticsearch client configuration
const esClient = new Client({
  node: 'http://localhost:9200', // Change this to your Elasticsearch server URL if different
  log: 'trace', // Enable detailed logging
});

// Function to fetch documents from Elasticsearch
async function fetchDocuments(index) {
  try {
    console.log(`Fetching documents from index: ${index}`);
    const response = await esClient.search({
      index,
      body: {
        query: {
          match_all: {},
        },
        _source: ['why1', 'why2', 'why3', 'why4', 'why5', 'lessons_learned'], // Fetch only the necessary fields
      },
      size: 1000, // Adjust this number as needed
    });

    // Log the full response for debugging
    console.log('Elasticsearch response:', JSON.stringify(response, null, 2));

    if (response.body && response.body.hits && response.body.hits.hits) {
      console.log(`Found ${response.body.hits.hits.length} documents`);
      return response.body.hits.hits;
    } else {
      throw new Error('Unexpected Elasticsearch response structure');
    }
  } catch (error) {
    console.error('Error fetching documents:', error);
    throw error;
  }
}

// Function to generate embeddings for a given text using the Flask server
async function generateEmbedding(text) {
  try {
    if (!text) {
      console.log('Empty text received, returning zero vector.');
      // Return a zero vector of length 768 (the embedding size)
      return new Array(768).fill(0);
    }

    console.log(`Generating embedding for text: ${text}`);
    const response = await axios.post('http://localhost:5000/embed', { text });
    console.log('Embedding response:', response.data.embeddings);
    return response.data.embeddings;
  } catch (error) {
    console.error('Error generating embedding:', error.response ? error.response.data : error.message);
    throw error;
  }
}

// Function to update a document in Elasticsearch
async function updateDocument(index, id, doc) {
  try {
    console.log(`Updating document ID: ${id}`);
    await esClient.update({
      index,
      id,
      body: {
        doc,
      },
    });
    console.log(`Document ID: ${id} updated successfully`);
  } catch (error) {
    console.error('Error updating document:', error);
    throw error;
  }
}

// Main function to fetch, generate embeddings, and update documents
async function processDocuments() {
  const index = 'incidents'; // Your Elasticsearch index name
  try {
    const documents = await fetchDocuments(index);

    for (const doc of documents) {
      const { _id, _source } = doc;

      const why1Embedding = await generateEmbedding(_source.why1);
      const why2Embedding = await generateEmbedding(_source.why2);
      const why3Embedding = await generateEmbedding(_source.why3);
      const why4Embedding = await generateEmbedding(_source.why4);
      const why5Embedding = await generateEmbedding(_source.why5);
      const lessonsLearnedEmbedding = await generateEmbedding(_source.lessons_learned);

      const updatedDoc = {
        why1_vector: why1Embedding,
        why2_vector: why2Embedding,
        why3_vector: why3Embedding,
        why4_vector: why4Embedding,
        why5_vector: why5Embedding,
        lessons_learned_vector: lessonsLearnedEmbedding,
      };

      await updateDocument(index, _id, updatedDoc);
      console.log(`Updated document ID: ${_id}`);
    }

    console.log('All documents updated successfully.');
  } catch (error) {
    console.error('Error processing documents:', error);
  }
}

// Execute the main function
processDocuments();
