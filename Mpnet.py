# mpnet_service.py
from flask import Flask, request, jsonify
from transformers import AutoTokenizer, AutoModel
import torch
import os

app = Flask(__name__)

# Specify the path to the unzipped model directory
model_path = "mpnet_model"

# Load the MPNet model and tokenizer from the local directory
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModel.from_pretrained(model_path)

def get_embedding(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)
    with torch.no_grad():
        outputs = model(**inputs)
    # Use the mean pooling for sentence embeddings
    embeddings = outputs.last_hidden_state.mean(dim=1).squeeze().numpy().tolist()
    return embeddings

@app.route('/embed', methods=['POST'])
def embed():
    data = request.json
    text = data.get("text")
    if not text:
        return jsonify({"error": "Text not provided"}), 400
    embeddings = get_embedding(text)
    return jsonify({"embeddings": embeddings})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
