import os
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Set the path to the folder containing the CSV files
folder_path = '../../countrywise_dataset'

# Set the path to the folder where you want to save the images
output_folder = '../../results/pca_results_with_graph'

# Create the output folder if it doesn't exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Create a DataFrame to store 'k' values for each CSV file
k_values_df = pd.DataFrame(columns=['File', 'Country', 'k'])

# Get a list of CSV files in the folder
csv_files = [file for file in os.listdir(folder_path) if file.endswith('.csv')]

# Loop through each CSV file
for file_name in csv_files:
    # Read the CSV file into a DataFrame
    file_path = os.path.join(folder_path, file_name)
    df = pd.read_csv(file_path)

    # Separate the 'Year' column
    years = df['Year']
    features = df.drop(columns=['Country', 'Year'])

    # Standardize the features
    scaler = StandardScaler()
    scaled_features = scaler.fit_transform(features)

    # Perform PCA
    pca = PCA()
    principal_components = pca.fit_transform(scaled_features)

    # Print the principal components
    print("Principal Components for {}".format(file_name))
    for i, component in enumerate(pca.components_):
        print("Principal Component {}: {}".format(i+1, component))

    # Analyze the explained variance ratio
    explained_variance_ratio = pca.explained_variance_ratio_

    # Plot explained variance ratio
    plt.figure(figsize=(10, 6))
    plt.plot(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio * 100, marker='o')
    plt.xlabel('Number of Principal Components')
    plt.ylabel('Explained Variance Ratio (%)')
    plt.title('Explained Variance Ratio vs. Number of Principal Components ({})'.format(file_name))
    plt.grid(True)
    plt.tight_layout()

    # Save the plot as an image
    output_file_path = os.path.join(output_folder, '{}_explained_variance.png'.format(file_name.split('.')[0]))
    plt.savefig(output_file_path)
    plt.close()

    # Plot cumulative explained variance
    cumulated_variance_ratio = explained_variance_ratio.cumsum()
    plt.figure(figsize=(10, 6))
    plt.plot(range(1, len(cumulated_variance_ratio) + 1), cumulated_variance_ratio * 100, marker='o', color='orange')
    plt.xlabel('Number of Principal Components')
    plt.ylabel('Cumulative Explained Variance Ratio (%)')
    plt.title('Cumulative Explained Variance Ratio vs. Number of Principal Components ({})'.format(file_name))
    plt.grid(True)
    plt.tight_layout()

    # Save the plot as an image
    output_file_path = os.path.join(output_folder, '{}_cumulative_variance.png'.format(file_name.split('.')[0]))
    plt.savefig(output_file_path)
    plt.close()

    # Calculate 'k' value for selecting principal components
    total_variance = pca.explained_variance_.sum()
    threshold = 0.95  # You can adjust the threshold as needed
    cumulative_variance = 0
    k = 0
    for variance in pca.explained_variance_:
        cumulative_variance += variance
        k += 1
        if cumulative_variance / total_variance >= threshold:
            break

    # Store the 'k' value in the DataFrame
    country_name = file_name.split('.')[0]  # Assuming the file name represents the country
    k_values_df = pd.concat([k_values_df, pd.DataFrame({'File': [file_name], 'Country': [country_name], 'k': [k]})], ignore_index=True)

# Save the 'k' values DataFrame to a CSV file
k_values_df.to_csv(os.path.join(output_folder, 'k_values.csv'), index=False)
