import os
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
import numpy as np

# Path to the folder containing CSV files
folder_path = '../../countrywise_dataset'

# Create the output directory to store pie charts if it doesn't exist
output_folder_path = '../../results/pie_charts'
if not os.path.exists(output_folder_path):
    os.makedirs(output_folder_path)

def visualize_top_pollutants(country, data):
    # Exclude non-numeric columns (country and year)
    numeric_data = data.iloc[:, 2:]  
    # Calculate correlation matrix
    correlation_matrix = numeric_data.corr()
    
    # Prepare features and target
    pollutants_columns = data.columns[9:]
    diseases = data.columns[2:9]
    
    # Transpose the correlation matrix so each row corresponds to a pollutant
    correlation_matrix_transposed = correlation_matrix.transpose()
    
    # Get the top 3 pollutants based on correlation with diseases
    top_pollutants = correlation_matrix_transposed.abs().nlargest(3, columns=diseases).index
    
    # Iterate through top 3 pollutants
    for pollutant in top_pollutants:
        # Get correlation of the current pollutant with all diseases
        disease_correlation = correlation_matrix[pollutant].abs().values
        
        # Use the current pollutant as feature
        X_current = data[pollutant].values.reshape(-1, 1)
        
        # Standardize the input features
        scaler = StandardScaler()
        X_current = scaler.fit_transform(X_current)
        
        # Ensure that X_current and disease_correlation have the same number of samples
        min_samples = min(X_current.shape[0], len(diseases))
        X_current = X_current[:min_samples]
        disease_correlation = disease_correlation[:min_samples]
        
        # Perform Random Forest regression
        rf = RandomForestRegressor()
        rf.fit(X_current, disease_correlation)
        
        # Visualize feature importances using pie chart
        plt.figure(figsize=(10, 8))  # Increase figure size
        plt.pie(rf.feature_importances_, labels=diseases, autopct='%1.1f%%')
        plt.title(f'Random Forest Feature Importance for {pollutant} in {country}')
        plt.axis('equal')
        
        # Save the pie chart
        output_file = os.path.join(output_folder_path, f'{country}_{pollutant}_pie_chart.png')
        plt.savefig(output_file)
        plt.close()


# Iterate through all CSV files in the folder
for file_name in os.listdir(folder_path):
    if file_name.endswith('.csv'):
        csv_file_path = os.path.join(folder_path, file_name)
        # Read the CSV file
        country = os.path.splitext(file_name)[0]  # Extract country name from file name
        data = pd.read_csv(csv_file_path)
        # Call the function to visualize top pollutants for each disease and save pie charts
        visualize_top_pollutants(country, data)
