import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import os
import matplotlib.pyplot as plt

# Load p_q_values.csv
p_q_values = pd.read_csv("./p_q_values.csv")

# Create a directory to store forecasts if it doesn't exist
output_directory = "../../results/forecasting_results"
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# Iterate over each row in p_q_values
for index, row in p_q_values.iterrows():
    country = row["Country"]
    disease = row["Disease"]
    p_disease = row["P_Disease"]
    q_disease = row["Q_Disease"]
    pollutant = row["Pollutant"]
    p_pollutant = row["P_Pollutant"]
    q_pollutant = row["Q_Pollutant"]
    
    # Load time-series data for the country
    time_series_file = os.path.join("../../countrywise_dataset", f"{country}.csv")
    time_series_data = pd.read_csv(time_series_file)
    
    # Create separate dataframes for major disease and pollutant
    disease_data = time_series_data[[disease]]
    pollutant_data = time_series_data[[pollutant]]
    
    # Fit ARIMA models for major disease and pollutant
    try:
        if p_disease > 0 or q_disease > 0:
            model_disease = ARIMA(disease_data, order=(p_disease, 0, q_disease))
            model_disease_fit = model_disease.fit()
            disease_forecast = model_disease_fit.forecast(steps=10)  # Adjust steps as needed

            # Plot forecast for disease
            plt.figure(figsize=(10, 6))
            plt.plot(time_series_data['Year'], disease_data, label='Actual')
            plt.plot(range(2020, 2030), disease_forecast, color='red', linestyle='--', label='Forecast')
            plt.title(f"{country} - {disease} Forecast")
            plt.xlabel('Year')
            plt.ylabel('Cases')
            plt.legend()
            plt.grid(True)
            output_path = os.path.join(output_directory, country)
            if not os.path.exists(output_path):
                os.makedirs(output_path)
            plt.savefig(os.path.join(output_path, f"{country}_{disease}_forecast.png"))
            plt.close()

    except Exception as e:
        print(f"Error processing {country} - {disease}: {e}")

    try:
        if p_pollutant > 0 or q_pollutant > 0:
            model_pollutant = ARIMA(pollutant_data, order=(p_pollutant, 0, q_pollutant))
            model_pollutant_fit = model_pollutant.fit()
            pollutant_forecast = model_pollutant_fit.forecast(steps=10)  # Adjust steps as needed

            # Plot forecast for pollutant
            plt.figure(figsize=(10, 6))
            plt.plot(time_series_data['Year'], pollutant_data, label='Actual')
            plt.plot(range(2020, 2030), pollutant_forecast, color='red', linestyle='--', label='Forecast')
            plt.title(f"{country} - {pollutant} Forecast")
            plt.xlabel('Year')
            plt.ylabel('Concentration')
            plt.legend()
            plt.grid(True)
            output_path = os.path.join(output_directory, country)
            if not os.path.exists(output_path):
                os.makedirs(output_path)
            plt.savefig(os.path.join(output_path, f"{country}_{pollutant}_forecast.png"))
            plt.close()

    except Exception as e:
        print(f"Error processing {country} - {pollutant}: {e}")