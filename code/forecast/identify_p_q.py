import pandas as pd
import matplotlib.pyplot as plt
import os
import numpy as np
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import acf, pacf
import csv

# Read the pollutants.csv file
pollutants_data = pd.read_csv("./common_pollutants.csv")



# Create a list to store p and q values
p_q_values = []

# Iterate over each row in pollutants data
for index, row in pollutants_data.iterrows():
    country = row["Country"]
    disease = row["Disease"]
    pollutant = row["Pollutant"]
    
    # Load the time-series data for the country
    time_series_file = os.path.join("../../countrywise_dataset", f"{country}.csv")
    time_series_data = pd.read_csv(time_series_file)
    
    # Plot ACF and PACF for disease
    fig, ax = plt.subplots(2, 2, figsize=(15, 10))
    plot_acf(time_series_data[disease], ax=ax[0, 0], title=f"ACF - {disease}")
    plot_pacf(time_series_data[disease], ax=ax[0, 1], title=f"PACF - {disease}")
    
    # Plot ACF and PACF for pollutant
    plot_acf(time_series_data[pollutant], ax=ax[1, 0], title=f"ACF - {pollutant}")
    plot_pacf(time_series_data[pollutant], ax=ax[1, 1], title=f"PACF - {pollutant}")
    
    plt.savefig(os.path.join("acf_pcf_plots", country, f"ACF_PACF_{country}{disease}{pollutant}.png"))
    plt.close()
    
    # Calculate ACF and PACF values
    acf_disease, confint_disease = acf(time_series_data[disease], fft=False, alpha=0.05)
    pacf_disease, confint_pacf_disease = pacf(time_series_data[disease], alpha=0.05)
    acf_pollutant, confint_pollutant = acf(time_series_data[pollutant], fft=False, alpha=0.05)
    pacf_pollutant, confint_pacf_pollutant = pacf(time_series_data[pollutant], alpha=0.05)
    
    # Find significant lags
    if len(np.where(np.abs(pacf_disease[1:]) >= confint_pacf_disease[1:, 1])[0]) > 0:
        p_disease = np.where(np.abs(pacf_disease[1:]) >= confint_pacf_disease[1:, 1])[0][-1]
    else:
        p_disease = 0
    
    if len(np.where(np.abs(acf_disease[1:]) >= confint_disease[1:, 1])[0]) > 0:
        q_disease = np.where(np.abs(acf_disease[1:]) >= confint_disease[1:, 1])[0][-1]
    else:
        q_disease = 0
    
    if len(np.where(np.abs(pacf_pollutant[1:]) >= confint_pacf_pollutant[1:, 1])[0]) > 0:
        p_pollutant = np.where(np.abs(pacf_pollutant[1:]) >= confint_pacf_pollutant[1:, 1])[0][-1]
    else:
        p_pollutant = 0
    
    if len(np.where(np.abs(acf_pollutant[1:]) >= confint_pollutant[1:, 1])[0]) > 0:
        q_pollutant = np.where(np.abs(acf_pollutant[1:]) >= confint_pollutant[1:, 1])[0][-1]
    else:
        q_pollutant = 0
    
    # Append p and q values to the list
    p_q_values.append([country, disease, p_disease, q_disease, pollutant, p_pollutant, q_pollutant])

# Write p and q values to a CSV file
with open('p_q_values.csv', 'w', newline='') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(['Country', 'Disease', 'P_Disease', 'Q_Disease', 'Pollutant', 'P_Pollutant', 'Q_Pollutant'])
    csvwriter.writerows(p_q_values)

print("p and q values saved to p_q_values.csv")